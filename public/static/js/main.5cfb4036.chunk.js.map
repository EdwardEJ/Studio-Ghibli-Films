{"version":3,"sources":["movie-cover.jpg","Studio_Ghibli_logo.svg","components/MovieCard.js","components/GhibliMovies.js","components/Film.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieCard","film","title","director","producer","release_date","id","className","to","src","name","alt","GHIBLI_MOVIES","gql","GhibliMovies","useQuery","loading","error","data","Movies","map","key","GHIBLI_FILM","Film","useParams","variables","console","log","description","Header","client","ApolloClient","uri","cache","InMemoryCache","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,gD,6LCoB5BC,EAhBG,SAAC,GAA+D,IAAD,IAA5DC,KAAQC,EAAoD,EAApDA,MAAOC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,GACpE,OACE,yBAAKC,UAAU,cACb,kBAAC,IAAD,CAAMC,GAAE,eAAUF,IAChB,yBAAKG,IAAKC,IAAMC,IAAI,UACpB,yBAAKJ,UAAU,iBACb,4BAAKL,GACL,wCAAcC,GACd,wCAAcC,GACd,2BAAIC,O,qLCTd,IAAMO,EAAgBC,cAAH,KA2BJC,EAfM,WAAO,IAAD,EACQC,mBAASH,GAAlCI,EADiB,EACjBA,QAASC,EADQ,EACRA,MAAOC,EADC,EACDA,KACxB,OAAIF,EAAgB,yCAChBC,EAAc,oCAGhB,6BAASV,UAAU,oBAChBW,EAAKC,OAAOC,KAAI,SAAAnB,GAAI,OACnB,kBAAC,EAAD,CAAWoB,IAAKpB,EAAKK,GAAIL,KAAMA,S,0NCnBvC,IAAMqB,EAAcT,cAAH,KAwCFU,EA3BF,WAAO,IACVjB,EAAOkB,cAAPlB,GADS,EAGgBS,mBAASO,EAAa,CAAEG,UAAW,CAAEnB,QAA9DU,EAHS,EAGTA,QAASC,EAHA,EAGAA,MAAOC,EAHP,EAGOA,KAExB,GADAQ,QAAQC,IAAIT,GACRF,EAAS,OAAO,yCACpB,GAAIC,EAAO,OAAO,oCAND,MAcgDC,EAAKK,KAA9DrB,EAdS,EAcTA,MAAO0B,EAdE,EAcFA,YAAavB,EAdX,EAcWA,aAAcF,EAdzB,EAcyBA,SAAUC,EAdnC,EAcmCA,SAEpD,OADAsB,QAAQC,IAAIC,GAEV,yBAAKrB,UAAU,oBACb,yBAAKA,UAAU,kBACb,4BAAKL,GACL,0CAAgBG,EAAhB,gBAA2CF,EAA3C,oBAAsEC,GACtE,2CAAiBwB,M,iBCxBVC,EAZA,WACb,OACE,oCACE,gCACE,4BACE,yBAAKpB,IAAKC,IAAMC,IAAI,sBCAxBmB,EAAS,IAAIC,eAAa,CAC9BC,IAAK,WACLC,MAAO,IAAIC,kBAiBEC,MAdf,WACE,OACE,kBAAC,iBAAD,CAAgBL,OAAQA,GACtB,kBAAC,IAAD,KACE,yBAAKvB,UAAU,OACb,kBAAC,IAAD,CAAO6B,KAAK,IAAIC,UAAWR,IAC3B,kBAAC,IAAD,CAAOS,OAAK,EAACF,KAAK,IAAIC,UAAWvB,IACjC,kBAAC,IAAD,CAAOwB,OAAK,EAACF,KAAK,YAAYC,UAAWd,QCR/BgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACEC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLS,QAAQT,MAAMA,EAAMsC,c","file":"static/js/main.5cfb4036.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/movie-cover.53baceef.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Studio_Ghibli_logo.7a2a1c26.svg\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport name from '../movie-cover.jpg'\r\n\r\nconst MovieCard = ({ film: { title, director, producer, release_date, id } }) => {\r\n  return (\r\n    <div className='movie-card'>\r\n      <Link to={`Film/${id}`}>\r\n        <img src={name} alt='dummy' />\r\n        <div className='movie-content'>\r\n          <h2>{title}</h2>\r\n          <p>Director: {director}</p>\r\n          <p>Producer: {producer}</p>\r\n          <p>{release_date}</p>\r\n        </div>\r\n      </Link>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default MovieCard","import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport MovieCard from './MovieCard'\r\n\r\nconst GHIBLI_MOVIES = gql`\r\n query GhibliMoves {\r\n   Movies {\r\n    id\r\n    title\r\n    director\r\n    producer\r\n    release_date\r\n   }\r\n }\r\n`\r\n\r\nconst GhibliMovies = () => {\r\n  const { loading, error, data } = useQuery(GHIBLI_MOVIES);\r\n  if (loading) return <p>Loading...</p>\r\n  if (error) return <p>Error</p>\r\n\r\n  return (\r\n    <section className='movies-container'>\r\n      {data.Movies.map(film => (\r\n        <MovieCard key={film.id} film={film} />\r\n      )\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default GhibliMovies;","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { gql, useQuery } from '@apollo/client';\r\n// import People from './People'\r\n\r\nconst GHIBLI_FILM = gql`\r\n query Film($id: String!) {\r\n   Film(id: $id) {\r\n    title\r\n    description\r\n    director\r\n    producer\r\n    release_date\r\n    people\r\n    }\r\n  }\r\n`\r\n\r\nconst Film = () => {\r\n  const { id } = useParams()\r\n\r\n  const { loading, error, data } = useQuery(GHIBLI_FILM, { variables: { id } });\r\n  console.log(data)\r\n  if (loading) return <p>Loading...</p>\r\n  if (error) return <p>Error</p>\r\n\r\n  // let peopleArray = people.split(',https://ghibliapi.herokuapp.com/people/')\r\n  // let test = peopleArray[0].split('https://ghibliapi.herokuapp.com/people/')\r\n  // test.splice(0, 1)\r\n  // peopleArray.splice(0, 1)\r\n  // let peopleIDs = peopleArray.concat(test)\r\n\r\n  const { title, description, release_date, director, producer } = data.Film\r\n  console.log(description)\r\n  return (\r\n    <div className='person-container'>\r\n      <div className='person-content'>\r\n        <h2>{title}</h2>\r\n        <p>Released in {release_date} directed by {director} and produced by {producer}</p>\r\n        <p>Description: {description}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Film","import React from 'react'\r\nimport name from '../Studio_Ghibli_logo.svg'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1>\r\n          <img src={name} alt='Studio Ghibli' />\r\n        </h1>\r\n      </header>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header ","import { ApolloProvider } from '@apollo/client';\nimport React from 'react';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport GhibliMovies from './components/GhibliMovies'\nimport Film from './components/Film'\nimport Header from './components/Header'\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"App\">\n          <Route path=\"/\" component={Header} />\n          <Route exact path=\"/\" component={GhibliMovies} />\n          <Route exact path=\"/Film/:id\" component={Film} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/style.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App />\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}